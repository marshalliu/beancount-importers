# -*- coding: UTF-8 -*-
#!/usr/bin/env python

import os
import sys
import logging
import beancount.ingest.extract

isSmart = True
try:
    from smart_importer import apply_hooks, PredictPostings, PredictPayees
    from smart_importer.detector import DuplicateDetector
    import jieba
    jieba.initialize()
    tokenizer = lambda s: list(jieba.cut(s))

except ImportError:
    isSmart = False

beancount.ingest.extract.HEADER = ''
sys.path.append("./")
from importers.wechat import WechatImporter
# from importers.wechat import SmartWechatImporter

accountDict = {
    "平安银行": "Liabilities:Life:CreditCard:Pingan",
    "建设银行": "Liabilities:Life:CreditCard:CCB",
    "中信银行": "Liabilities:Life:CreditCard:CITIC",
    "浦发银行": "Liabilities:Life:CreditCard:SPDB",
    "零钱": "Assets:Flow:EBank:WeChat",
    "农业银行": "Assets:Flow:Bank:ABCDebt",
    "/": "Assets:Flow:EBank:WeChat"
}


expenseDict = {
    '收费小管家': "Expenses:Life:Auto:Parking",
    '红星欧丽洛雅家居生活广场': "Expenses:Life:Auto:Parking",
    '停车': "Expenses:Life:Auto:Parking",
    '交通,打车':'Expenses:Traffic:Taxi',
    '交通,机票':'Expenses:Traffic:Aircraft',
    '交通,火车':'Expenses:Traffic:Train',
    '人情':'Expenses:Gift:Weddings',
    '住房':'Expenses:Charges:Utilities',
    '医疗':'Expenses:Health:Medical',
    '娱乐':'Expenses:Entertainment:Others',
    '投资亏损':'Expenses:StupidTax',
    '文教':'Expenses:Shopping:Books',
    '旅行':'Expenses:Travel',
    '汽车':'Expenses:Traffic:Car',
    '购物':"Expenses:Shopping:Others",
    '购物,数码':'Expenses:Shopping:Electronics',
    '购物,日用':'Expenses:Shopping:Commodities',
    '购物,玩具':'Expenses:Shopping:Hobbies',
    '购物,电器':'Expenses:Shopping:Appliances',
    '购物,美妆':'Expenses:PersonalCare:Hair',
    '购物,运动用品':'Expenses:Shopping:Sports',
    '购物,鞋服':"Expenses:Shopping:Clothing",
    '购物,饰品':"Expenses:Shopping:Clothing",
    '通讯':'Expenses:Charges:Communication',
    '零食烟酒':'Expenses:Food:Snacks',
    '零食烟酒,水果':'Expenses:Food:Snacks',
    '零食烟酒,烟酒':'Expenses:Food:Drinks',
    '零食烟酒,茶水':'Expenses:Food:Drinks',
    '零食烟酒,零食':'Expenses:Food:Snacks',
    '零食烟酒,饮料':'Expenses:Food:Drinks',
    '餐饮':'Expenses:Food:Others',
    '餐饮,三餐':'Expenses:Food:Canteen',
    '餐饮,食材':'Expenses:Food:Ingredients',
    '其他':'Expenses:FIXME',
    'DEFAULT':'Expenses:FIXME',
    '公积金':'Income:Job:HouseProvident',
    '其他收入':'Income:Others', 
    '利息收入':'Income:Rental:CQY', 
    '奖金':'Income:Job:Subsidy', 
    '意外所得':'Income:Others',
    '报销收入':'Income:Reimbursements', 
    '薪资':'Income:Job:Salary', 
    '退款':'Income:Reimbursements',
}


if isSmart:
    CONFIG = [
        # WechatImporter(accountDict=accountDict)
        apply_hooks(WechatImporter(accountDict=accountDict, expenseDict=expenseDict),
                    [DuplicateDetector(), PredictPostings(string_tokenizer=tokenizer),PredictPayees(string_tokenizer=tokenizer)])
        # SmartWechatImporter(accountDict=accountDict)
    ]
else:
    CONFIG = [
        WechatImporter(accountDict=accountDict, expenseDict=expenseDict)
        # apply_hooks(WechatImporter(accountDict=accountDict), [PredictPostings()])
        # SmartWechatImporter(accountDict=accountDict)
    ]
